<?xml version="1.0" encoding="UTF-8"?>

<profile name="IntelliJ" version="3.2">

		<!-- 
			Pattern rule appliance by priority :
			0 - locker (1004)
			1 - stack_size_interest (1003)
			2 - exclude_thread_name (1002)
			3 - exclude (1001)
			4 - locker  (7)
			5 - function  (6)
			6 - function_discovery  (5)
			7 - executor  (4)
			8 - executor_thread_name (3)
			9 - operation (2)
			10 - operation_discovery (1)
			Exclude, function, operation and executor patterns priorities can be overriden by pattern attribute.
	 	-->
		<patterns>
			<!-- In pattern attribute, use semicolon separator to declare multiple line patterns -->
			<functions>
				<function pattern="com.intellij.execution.process.ProcessWaitFor" name="Intellij wait for executed process end"/>
				<function pattern="com.intellij.openapi.vfs.impl.local.LocalFileSystemImpl.storeRefreshStatusToFiles" name="Intellij store file status refresh"/>
				<function pattern="com.intellij.openapi.vfs.newvfs.VfsImplUtil.findCachedFileByPath" name="Intellij file cache access"/>
				<function pattern="com.intellij.lang.javascript.psi.impl.JSReferenceExpressionImpl.multiResolve" name="Intellij JS execution"/>
			</functions>
			<operations>
				<!-- Operation patterns apply for the first 20 lines of the thread dump                	 -->
				<!-- Exception : patterns ending with '.' apply for the first 2 lines of the thread dump -->
				<operation pattern="com.intellij.lang.javascript.psi.types.JSTypeCastUtil.areListsEquivalent" name="Javascript list comparison"/>
				<operation pattern="com.jetbrains.rd.platform.codeWithMe.ui.WireStatsStatusBarWidget.update" name="Update UI widget"/>
				<operation pattern="com.intellij.openapi.vfs.VirtualFileManager.constructUrl" name="Build URL"/>
				<operation pattern="com.intellij.lang.javascript.psi." name="Javascript operation"/>
			</operations>
			<lockers>
				<!-- Locker patterns apply for the first 20 lines of the thread dump                 -->
  				<!-- locker pattern="java.util.concurrent.locks.LockSupport.park" name="LockSupport"/-->
			</lockers>
			<executors>
				<!-- Executor patterns must be available within the 20 first lines of the thread dump -->
				<executor pattern="com.intellij.concurrency.JobLauncherImpl$1MyProcessQueueTask.call" name="IntelliJ task"/>
			</executors>
			<executor_thread_names>
				<!-- Executor pattern based on the thread name. Regular expression recommended -->
				<!--executor_thread_name pattern_regex="thread pattern" name="Thread type name"/-->
			</executor_thread_names>
			<excludes>
				<!-- If stack size is equal or below the limit (optional size attribute), thread stack is excluded -->
				<exclude pattern="java.io.BufferedReader.readLine;com.intellij.rt.execution.application.AppMainV2$1.run" name="IntelliJ Ctrl break thread" size="15"/>		<!-- Multiple line pattern -->
				<exclude pattern="java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos;java.util.concurrent.DelayQueue.take;com.intellij.util.concurrency.AppDelayQueue.lambda$new" name="IntelliJ App Delay thread" size="7"/>		<!-- Multiple line pattern -->
				<exclude pattern="java.io.Reader.read;com.intellij.util.io.BaseOutputReader.readAvailableBlocking;com.intellij.util.io.BaseDataReader.readAvailable;com.intellij.util.io.BaseDataReader.doRun" name="IntelliJ Console reader thread" size="26"/>		<!-- Multiple line pattern -->
				<exclude pattern="java.net.ServerSocket.accept;org.jetbrains.plugins.scala.findUsages.compilerReferences.compilation.SbtCompilationSupervisor.$anonfun$init" name="IntelliJ Scala compiler server" size="19"/>		<!-- Multiple line pattern -->
				<exclude pattern="com.intellij.ide.IdeEventQueue.getNextEvent;java.awt.EventDispatchThread.pumpOneEventForFilters" name="IntelliJ AWT event wait" size="17"/>		<!-- Multiple line pattern -->
				<exclude pattern="sun.nio.ch.DatagramChannelImpl.trustedBlockingReceive;sun.nio.ch.DatagramChannelImpl.blockingReceive;sun.nio.ch.DatagramSocketAdaptor.receive;java.net.DatagramSocket.receive;com.intellij.T.G.T.G.T;com.intellij.T.G.T.c.run" name="IntelliJ server wait" size="16"/>		<!-- Multiple line pattern -->
				<exclude pattern="java.util.concurrent.locks.LockSupport.parkNanos;kotlinx.coroutines.BlockingCoroutine.joinBlocking;kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking;kotlinx.coroutines.BuildersKt.runBlocking;com.intellij.idea.Main.main" name="IntelliJ main" size="6"/>		<!-- Multiple line pattern -->
				<exclude pattern="java.util.concurrent.DelayQueue.take;com.intellij.util.concurrency.AppDelayQueue$TransferThread.run" name="Periodic task launcher waiting" size="5"/>		<!-- Multiple line pattern -->
			</excludes>
			<exclude_thread_names>
				<!-- Exclude stack based on thread name. Regular expression based recommended -->
				<!-- If stack size is equal or below the limit (optional size attribute), thread stack is excluded -->
				<!-- exclude_thread_name pattern_regex="RMI TCP.*" name="RMI"/-->		 
			</exclude_thread_names>
		</patterns>

</profile>
