<?xml version="1.0" encoding="UTF-8"?>

<profile name="Scala" version="2.6">

		<!-- 
			Pattern rule appliance by priority :
			1 - stack_size_interest (1003)
			2 - exclude_thread_name (1002)
			3 - exclude (1001)
			4 - locker  (7)
			5 - function  (6)
			6 - function_discovery  (5)
			7 - executor  (4)
			8 - executor_thread_name (3)
			9 - operation (2)
			10 - operation_discovery (1)
			Exclude, function, operation and executor patterns priorities can be overriden by pattern attribute.
	 	-->
		<patterns>
			<!-- In pattern attribute, use semicolon separator to declare multiple line patterns -->
			<functions>
				<!--function pattern="javax.xml.parsers.DocumentBuilderFactory.newInstance" name="DOM builder loading"/-->
				<function pattern="scala.util.parsing.combinator.RegexParsers.parse" name="Scala regex process"/>
			</functions>
			<operations>
				<!-- Operation patterns apply for the first 20 lines of the thread dump                	 -->
				<!-- Exception : patterns ending with '.' apply for the first 2 lines of the thread dump -->
				<operation pattern="scala.collection.AbstractIterable.toMap" name="Scala map creation"		  				type="Collection"/>
				<operation pattern="scala.collection.immutable.TreeMap$.from" name="Scala tree map copy"					type="Collection"/>
				<operation pattern="scala.collection.immutable.RedBlackTree$Tree" name="Scala red black tree operation"		type="Collection"/>
				<operation pattern="scala.collection.Iterator.zip" name="Scala zip operation"/>
				<operation pattern="anorm.RowParser" name="Scala SQL row parsing"/>
				<operation pattern="scala." name="Scala operation"/>
				<operation pattern="anorm." name="Scala SQL data operation"/>
			</operations>
			<lockers>
				<!-- Locker patterns apply for the first 20 lines of the thread dump                 -->
  				<!-- locker pattern="java.util.concurrent.locks.LockSupport.park" name="LockSupport"/-->
			</lockers>
			<executors>
				<!-- Executor patterns must be available within the 20 first lines of the thread dump -->
				<!-- executor pattern="scala.concurrent.impl.Promise$Transformation.run" name="Scala transformation thread"/ -->
			</executors>
			<executor_thread_names>
				<!-- Executor pattern based on the thread name. Regular expression recommended -->
				<!--executor_thread_name pattern="thread pattern" name="Thread type name"/-->
			</executor_thread_names>
			<excludes>
				<exclude pattern="scala.concurrent.forkjoin.ForkJoinPool.scan;scala.concurrent.forkjoin.ForkJoinPool.runWorker" name="Scala worker thread waiting for a task to execute"/>		<!-- Multiple line pattern -->
				<!-- If stack size is equal or below the limit (optional size attribute), thread stack is excluded -->
				<!-- exclude pattern="sun.misc.GC$Daemon.run" name="GC"/-->
			</excludes>
			<exclude_thread_names>
				<!-- Exclude stack based on thread name. Regular expression based recommended -->
				<!-- If stack size is equal or below the limit (optional size attribute), thread stack is excluded -->
				<!-- exclude_thread_name pattern_regex="RMI TCP.*" name="RMI"/-->
				<!-- exclude_thread_name pattern="JMX server connection timeout" name="RMI"/-->
			</exclude_thread_names>
		</patterns>

</profile>
