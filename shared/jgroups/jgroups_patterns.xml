<?xml version="1.0" encoding="UTF-8"?>

<profile name="Jgroups" version="3.3">

		<!-- 
			Pattern rule appliance by priority :
			0 - locker (1004)
			1 - stack_size_interest (1003)
			2 - exclude_thread_name (1002)
			3 - exclude (1001)
			4 - locker  (7)
			5 - function  (6)
			6 - function_discovery  (5)
			7 - executor  (4)
			8 - executor_thread_name (3)
			9 - operation (2)
			10 - operation_discovery (1)
			Exclude, function, operation and executor patterns priorities can be overriden by pattern attribute.
	 	-->
		<patterns>
			<!-- In pattern attribute, use semicolon separator to declare multiple line patterns -->
			<functions>
				<function pattern="org.jgroups.logging.Log4JLogImpl.error" name="Jgroups error logging"/>
			</functions>
			<operations>
				<!-- Operation patterns apply for the first 20 lines of the thread dump                	 -->
				<!-- Exception : patterns ending with '.' apply for the first 2 lines of the thread dump -->
			</operations>
			<lockers>
				<!-- Locker patterns apply for the first 20 lines of the thread dump                 -->
  				<!-- locker pattern="java.util.concurrent.locks.LockSupport.park" name="LockSupport"/-->
			</lockers>
			<executors>
				<!-- Executor patterns must be available within the 20 first lines of the thread dump -->
				<!--executor pattern="HttpServlet.service" name="HTTP request"/-->
				<executor pattern="org.jgroups.protocols.UDP$PacketReceiver.run" name="Jgroups UDP receiver thread"/>
				<executor pattern="org.jgroups.blocks.cs.TcpConnection$Receiver.run" name="Jgroups TCP receiver thread"/>
				<executor pattern="org.jgroups.protocols.FD_SOCK$ServerSocketHandler.run" name="Jgroups FD receiver thread"/>
				<executor pattern="org.jgroups.protocols.TP$MyHandler.run" name="Jgroups transport protocol thread"/>
				<executor pattern="org.jgroups.blocks.cs.TcpServer$Acceptor.run" name="Jgroups TCP server thread"/>
				<executor pattern="org.jgroups.stack.DiagnosticsHandler.runUDP" name="Jgroups UDP diagnostic thread"/>
				<executor pattern="org.jgroups.util.SubmitToThreadPool$SingleMessageHandler.run" name="Jgroups message handler"/>
			</executors>
			<executor_thread_names>
				<!-- Executor pattern based on the thread name. Regular expression recommended -->
				<!--executor_thread_name pattern="thread pattern" name="Thread type name"/-->
			</executor_thread_names>
			<excludes>
				<!-- If stack size is equal or below the limit (optional size attribute), thread stack is excluded -->
				<exclude pattern="org.jgroups.blocks.cs.TcpConnection$Receiver.run" name="Jgroups UDP receiver thread" size="9"/>
				<exclude pattern="org.jgroups.protocols.UDP$PacketReceiver.run" name="Jgroups UDP receiver thread" size="7"/>
				<exclude pattern="org.jgroups.protocols.FD_SOCK$ServerSocketHandler.run" name="Jgroups FD receiver thread" size="8"/>
				<exclude pattern="java.net.SocketInputStream.read;org.jgroups.protocols.FD_SOCK.run" name="Jgroups FD protocol receiver thread" size="7"/>
				<exclude pattern="org.jgroups.protocols.tom.DeliveryThread.run" name="Jgroups delivery thread" size="4"/>
				<exclude pattern="java.net.ServerSocket.accept;org.jgroups.blocks.cs.TcpServer$Acceptor.run" name="Jgroups TCP server thread" size="6"/>
				<exclude pattern="java.util.concurrent.DelayQueue.take;org.jgroups.util.TimeScheduler3.run" name="Jgroups thread waiting for a task to execute from a delay queue (take)"/>
				<exclude pattern="java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await;java.util.concurrent.ArrayBlockingQueue.take;org.jgroups.protocols.TransferQueueBundler.run" name="Jgroups transfer queue waiting" size="8"/>
				<exclude pattern="java.net.DatagramSocket.receive;org.jgroups.stack.DiagnosticsHandler.runUDP" name="Jgroups UDP diagnostic" size="7"/>
				<exclude pattern="java.net.SocketInputStream.read;java.io.BufferedInputStream.fill;java.io.BufferedInputStream.read;java.io.DataInputStream.readInt;org.jgroups.blocks.cs.TcpConnection$Receiver.run" name="Jgroups TCP receiver listening" size="9"/>
				<exclude pattern="sun.nio.ch.SelectorImpl.select;org.jgroups.blocks.cs.NioBaseServer$Acceptor.doSelect;org.jgroups.blocks.cs.NioBaseServer$Acceptor.run" name="Jgroups NIO base server select" size="7"/>
			</excludes>
			<exclude_thread_names>
				<!-- Exclude stack based on thread name. Regular expression based recommended -->
				<!-- If stack size is equal or below the limit (optional size attribute), thread stack is excluded -->
				<!-- exclude_thread_name pattern_regex="RMI TCP.*" name="RMI"/-->
				<!-- exclude_thread_name pattern="JMX server connection timeout" name="RMI"/-->
			</exclude_thread_names>
		</patterns>

</profile>
