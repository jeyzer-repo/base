<?xml version="1.0" encoding="UTF-8"?>

<profile name="Java" version="3.4-SNAPSHOT">

		<!-- 
			Pattern rule appliance by priority :
			0 - locker (1004)
			1 - stack_size_interest (1003)
			2 - exclude_thread_name (1002)
			3 - exclude (1001)
			4 - locker  (7)
			5 - function  (6)
			6 - function_discovery  (5)
			7 - executor  (4)
			8 - executor_thread_name (3)
			9 - operation (2)
			10 - operation_discovery (1)
			Exclude, function, operation and executor patterns priorities can be overriden by pattern attribute.
	 	-->
		<patterns>
			<!-- In pattern attribute, use semicolon separator to declare multiple line patterns -->
			<functions>
				<!-- J2EE -->
				<function pattern="javax.servlet.GenericServlet.init" name="Servlet startup" 							priority="1000"/>
				<function pattern="com.sun.enterprise.web.VirtualServer.startChildren" name="Virtual server startup" 	priority="1000"/>
				<function pattern="com.sun.enterprise.resource.AbstractResourcePool.resizePool" name="Java ressource pool resize"/>
				<function pattern="com.sun.enterprise.resource.pool.resizer.Resizer.resizePool" name="Java ressource pool resize"/>
				<function pattern="com.sun.enterprise.resource.pool.ConnectionPool.resizePoolAndGetNewResource" name="Java connection pool resize"/>
				<function pattern="com.sun.gjc.spi.jdbc40.ConnectionHolder40.isSupportClientInfo" name="JDBC client info access"/>
				<function pattern="javax.xml.parsers.DocumentBuilderFactory.newInstance" name="DOM builder loading"/>
				<function pattern="java.util.concurrent.ThreadPoolExecutor.addIfUnderMaximumPoolSize" name="Thread pool extension"/>
				<function pattern="java.util.concurrent.ThreadPoolExecutor.shutdownNow" name="Thread pool shutdown"/>
				<function pattern="java.util.concurrent.ThreadPoolExecutor.processWorkerExit" name="Thread worker exit"/>
				<function pattern="com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute" name="JMX attribute remote access"/>
				<function pattern="javax.management.MBeanServerInvocationHandler.findMXBeanProxy" name="MX bean proxy lookup"/>
				<function pattern="org.xml.sax.helpers.XMLReaderFactory.createXMLReader" name="XML read"/>
				<function pattern="com.sun.enterprise.resource.pool.PoolManagerImpl.getResource;com.sun.enterprise.connectors.ConnectionManagerImpl.getResource" name="Sun JDBC connection pool access"/>
				<function pattern="sun.management.GarbageCollectorImpl.createGCNotification" name="JMX GC notification creation"/>
				<function pattern="java.util.concurrent.ThreadPerTaskExecutor.start" name="Task execution"/>
				<!-- IMAP -->
				<function pattern="com.sun.mail.imap.IMAPStore.login" name="IMAP login"/>
				<function pattern="com.sun.mail.imap.protocol.IMAPProtocol.disconnect" name="IMAP disconnect"/>
				<function pattern="com.sun.mail.imap.protocol.IMAPProtocol.&lt;init&gt;" name="IMAP init"/>
				<!-- SSL -->
				<function pattern="ssl.ServerHandshaker.clientHello" name="SSL server handshake"/>
				<function pattern="sun.security.ssl.ClientHello$ClientHelloConsumer.consume" name="SSL server handshake"/>
				<function pattern="ssl.ClientHandshaker.serverCertificate" name="SSL client handshake"/>
				<function pattern="javax.net.ssl.impl.SSLSocketImpl.startHandshake" name="SSL handshake"/>
				<!-- JFR -->
				<function pattern="jdk.management.jfr.FlightRecorderMXBeanImpl.startRecording" name="JFR start recording"/>
				<function pattern="jdk.jfr.Recording.start" name="JFR start recording"/>
				<function pattern="jdk.management.jfr.FlightRecorderMXBeanImpl.stopRecording" name="JFR stop recording"/>
				<function pattern="jdk.jfr.internal.PlatformRecording.stop" name="JFR platform stop recording"/>
				<function pattern="jdk.jfr.internal.PlatformRecording.open" name="JFR platform start recording"/>
				<function pattern="jdk.jfr.internal.JVM.emitEvent" name="JFR publish events"/>
				<!-- VM -->
				<function pattern="jdk.internal.vm.ThreadDumper.dumpThreadsToFile" name="VM file thread dump"/>
				<!-- Virtual Threads -->
				<function pattern="java.lang.VirtualThread.runContinuation" name="Resume virtual thread"/>
				<function pattern="java.lang.VirtualThread.start" name="Start virtual thread"/>
				<!-- Others -->
				<function pattern="java.lang.Thread.dispatchUncaughtException" name="JVM uncaught exception dispatch"/>
				<function pattern="java.lang.Shutdown.shutdown" name="JVM shutdown in progress"/>
				<function pattern="sun.net.dns.ResolverConfigurationImpl.notifyAddrChange0" name="Wait for DNS update"/>
				<function pattern="java.util.logging.LogManager.reset" name="Java logger reset"/>
				<function pattern="java.lang.ApplicationShutdownHooks.runHooks" name="Shutdown hook execution"/>
			</functions>
			<operations>
				<!-- Operation patterns apply for the first 20 lines of the thread dump                	 -->
				<!-- Exception : patterns ending with '.' apply for the first 2 lines of the thread dump -->
				<!-- Kerberos -->
				<operation pattern="sun.security.krb5.Credentials.acquireTGT" name="Acquire Kerberos TGT ticket"		priority="900"/>				
				<!-- SSL -->
				<operation pattern="ssl.CipherBox.encrypt" name="SSL data encryption"										type="Crypto"/>
				<operation pattern="ssl.CipherBox.decrypt" name="SSL data decryption"										type="Crypto"/>
				<!-- Could those System/Runtime calls be catch ?-->
				<operation pattern="java.lang.Runtime.gc" name="Garbage collector forced execution" priority="900"/>
				<operation pattern="java.lang.System.gc"  name="Garbage collector forced execution" priority="900"/>
				<operation pattern="java.lang.Runtime.exit" name="JVM stopping" priority="900"/>
				<operation pattern="java.lang.System.exit"  name="JVM stopping" priority="900"/>
				<operation pattern="java.lang.Runtime.halt" name="JVM stopping" priority="900"/>
				<operation pattern="java.io.UnixFileSystem.delete" name="File deletion" priority="900"						type="File"/>
				<operation pattern="javax.xml.parsers.SAXParserFactory.newInstance" name="SAX parser factory creation"/>
				<operation pattern="Runtime.freeMemory" name="Access available memory"/>
				<operation pattern="com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean" name="Register MX bean"			type="JMX"/>
				<operation pattern="com.sun.jmx.mbeanserver.JmxMBeanServer.unregisterMBean" name="Unregister MX bean"		type="JMX"/>
				<operation pattern="javax.servlet.ServletRequestWrapper.getParameter" name="Servlet get param"/>
				<operation pattern="java.net.HttpURLConnection.getResponseCode" name="HTTP response wait"					type="Network"/>
				<operation pattern="java.net.NetworkInterface.getNetworkInterfaces" name="Get machine network interfaces"	type="Network"/>
				<operation pattern="java.net.InetAddress.getByName" name="IP lookup"										type="Network"/>
				<operation pattern="java.net.InetAddress.getAllByName" name="IP lookup"										type="Network"/>
				<operation pattern="java.net.SocketOutputStream.socketWrite" name="Socket writing"							type="Network"/>
				<operation pattern="java.net.Socket$SocketInputStream.read" name="Socket reading"							type="Network"/>
				<operation pattern="java.net.SocksSocketImpl.connect" name="Socket connect"									type="Network"/>
				<operation pattern="java.net.Socket.close" name="Socket close"												type="Network"/>
				<operation pattern="sun.nio.ch.WindowsSelectorImpl$SubSelector.poll0" name="Socket read wait"				type="Listen"/>
				<operation pattern="sun.nio.ch.EPollArrayWrapper.epollWait" name="Socket read wait"							type="Listen"/>
				<operation pattern="URLClassPath$FileLoader.getResource" name="System ressource access (file loader)"		type="File"/>
				<operation pattern="URLClassPath$JarLoader.getResource" name="System ressource access (jar loader)"			type="File"/>
				<operation pattern="Class.newInstance" name="Class loading"													type="Class loader"/>
				<operation pattern="java.lang.ClassLoader.getResource" name="Class loader ressource access"					type="Class loader"/>
				<operation pattern="java.lang.ClassLoader.loadClass" name="Class loading"									type="Class loader"/>
				<operation pattern="java.lang.ClassLoader.defineClass" name="Class byte loading"							type="Class loader"/>
				<operation pattern="java.util.jar.JarFile.getManifest" name="Jar manifest loading"							type="Class loader"/>
				<operation pattern="java.util.jar.JarFile.getInputStream" name="Jar entry loading"							type="Class loader"/>
				<operation pattern="java.util.jar.JarFile.getJarEntry" name="Jar entry access"								type="Class loader"/>
				<operation pattern="sun.instrument.InstrumentationImpl.getAllLoadedClasses" name="Class listing"/>
				<operation pattern="java.lang.Class.forName" name="Class access"/>
				<operation pattern="sun.nio.fs.WindowsNativeDispatcher.DeleteFile" name="File delete"						type="File"/>
				<operation pattern="java.io.WinNTFileSystem.checkAccess" name="File access check"							type="File"/>
				<operation pattern="java.nio.file.Files.move" name="File move"												type="File"/>
				<operation pattern="java.nio.file.Files.newDirectoryStream" name="Directory scan"							type="File"/>
				<operation pattern="java.io.File.exists" name="File exist check"											type="File"/>
				<operation pattern="java.nio.file.Files.exists" name="File exist check"										type="File"/>
				<operation pattern="java.io.File.lastModified" name="File last modified check"								type="File"/>
				<operation pattern="java.io.File.renameTo" name="File renaming"												type="File"/>
				<operation pattern="java.io.File.listFiles" name="File listing"												type="File"/>
				<operation pattern="java.io.File.list" name="File listing"													type="File"/>
				<operation pattern="ZipFile.open" name="Jar or zip file access"												type="File"/>
				<operation pattern="java.util.zip.ZipFile." name="Zip file access"											type="File"/>
				<operation pattern="java.util.zip.Inflater" name="Zip decompression"										type="File"/>
				<operation pattern="java.util.zip.GZIPOutputStream.write" name="Gzip compression"							type="File"/>
				<operation pattern="jdk.nio.zipfs.ZipFileSystemProvider.getFileSystem" name="Zip file system access"		type="File"/>
				<operation pattern="java.io.FileInputStream.read" name="File reading"										type="File"/>
				<operation pattern="java.io.FileInputStream.open" name="File opening"									    type="File"/>
				<operation pattern="java.io.FileInputStream.close" name="File closing"									    type="File"/>
				<operation pattern="java.io.FileOutputStream.open" name="File opening"									    type="File"/>
				<operation pattern="java.io.FileOutputStream.write" name="File writing"									    type="File"/>
				<operation pattern="java.io.RandomAccessFile.read" name="File reading"										type="File"/>
				<operation pattern="java.io.RandomAccessFile.open" name="File opening"										type="File"/>
				<operation pattern="java.io.RandomAccessFile.close" name="File closing"										type="File"/>
				<operation pattern="com.sun.imageio.plugins.png.PNGImageReader.read" name="PNG image read"					type="File"/>
				<operation pattern="com.sun.imageio.plugins.png.PNGImageWriter.write" name="PNG image write"				type="File"/>
				<operation pattern="DOMParser.parse" name="XML parsing"/>
				<operation pattern="org.apache.xerces.parsers.XMLParser.parse" name="XML parsing"/>
				<operation pattern="com.sun.org.apache.xml." name="XML operation"/>
				<operation pattern="org.apache.xerces." name="XML operation"/>
				<operation pattern="com.sun.xml.bind.v2.model.impl." name="JAXB operation"/>
				<operation pattern="javax.xml.bind.JAXBContext.newInstance" name="JAXB init"/>
				<operation pattern="java.lang.Object.clone" name="Java object cloning"/>
				<operation pattern="java.lang.AbstractStringBuilder.expandCapacity" name="String builder size expanding"	type="String"/>
				<operation pattern="java.lang.String.split" name="String split"												type="String"/>
				<operation pattern="java.util.concurrent.CopyOnWriteArrayList" name="Java array list copy"					type="Collection"/>
				<operation pattern="java.lang.System.arraycopy" name="Java array list copy"									type="Collection"/>
				<operation pattern="java.util.Arrays.copyOf" name="Java array copy"											type="Collection"/>
				<operation pattern="java.util.Arrays.equals" name="Java array equals"										type="Collection"/>
				<operation pattern="java.util.Collections.sort" name="Collection sort"										type="Collection"/>
				<operation pattern="java.util.WeakHashMap.get" name="Weak hashMap access"									type="Collection"/>
				<operation pattern="java.util.TimSort.sort" name="Timsort"/>
				<operation pattern="java.lang.VirtualThread.park" name="Virtual thread suspended"							type="VT unmounted"/>
				<operation pattern="java.lang.Thread.start" name="Java thread spawning-creation"/>
				<operation pattern="java.lang.Thread.&lt;init&gt;" name="Java thread creation"/>
				<operation pattern="java.lang.Thread.sleep" name="Thread on hold (sleep)"									type="Timed waiting"/>
				<operation pattern="java.lang.Thread.join" name="Waiting for other thread to terminate"						type="Synchro"  priority="910"/>
				<operation pattern="java.lang.VirtualThread.joinNanos" name="Waiting for virtual thread(s) to terminate"	type="Synchro"  priority="920"/>
				<operation pattern="java.lang.Thread.isInterrupted" name="Thread waiting for interruption"					type="Synchro"/>
				<operation pattern="java.lang.Thread.getStackTrace" name="Stack trace access"/>
				<operation pattern="com.sun.mail.iap.ResponseInputStream.readResponse" name="IMAP response read"	     priority="910" type="Mail"/>
				<operation pattern="com.sun.mail.smtp.SMTPTransport.protocolConnect" name="SMTP connect"	             priority="910" type="Mail"/>
				<operation pattern="com.sun.enterprise.resource.pool.datastructure.RWLockDataStructure.addResource" name="Write lock obtained to add a resource to the pool" priority="910"			type="Resource pool"/>
				<operation pattern="com.sun.enterprise.resource.pool.datastructure.RWLockDataStructure.removeResource" name="Write lock obtained to remove a resource from the pool" priority="910"	type="Resource pool"/>
				<operation pattern="com.sun.enterprise.resource.pool.datastructure.RWLockDataStructure.returnResource" name="Blocked on RW lock to get a resource from the pool" priority="910"		type="Resource pool"/>
				<operation pattern="com.sun.enterprise.resource.pool.datastructure.RWLockDataStructure.getResource" name="Blocked on RW lock to get a resource from the pool" priority="910"		type="Resource pool"/>
				<operation pattern="java.util.concurrent.FutureTask.awaitDone" name="Wait for Future task completion" 										priority="910"	type="Task delegation"/>
				<operation pattern="java.util.concurrent.CompletableFuture.get" name="Wait for Future result" 												priority="910"	type="Task delegation"/>
				<operation pattern="java.util.concurrent.CompletableFuture.waitingGet" name="Wait for Future result" 										priority="910"	type="Task delegation"/>
				<operation pattern="java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock" name="Blocked on RW lock (Writer)" priority="910"	type="Synchro"/>
				<operation pattern="java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock.lock" name="Blocked on RW lock (Reader)" priority="910"	type="Synchro"/>
				<operation pattern="java.util.concurrent.locks.ReentrantLock.unlock" name="Reentrant unlock" priority="910"/>
				<operation pattern="java.util.concurrent.locks.ReentrantLock.lock" name="Reentrant lock" priority="910"									type="Synchro"/>
				<operation pattern="java.util.concurrent.locks.ReentrantLock.tryLock" name="Reentrant try lock" priority="910"							type="Synchro"/>
				<operation pattern="java.util.concurrent.locks.LockSupport.park" name="Thread on hold (wait for unlock)"								type="Synchro"/>
				<operation pattern="java.util.concurrent.locks.AbstractQueuedSynchronizer.releaseShared" name="Notify all queue consumers"/>
				<operation pattern="java.time.LocalDateTime.atZone" name="Time zone date creation"/>
				<operation pattern="java.util.TimeZone" name="Java time zone operation"/>
				<operation pattern="UNIXProcess.waitFor" name="Waiting for Unix process execution end"													type="External process execution"/>
				<operation pattern="UNIXProcess.forkAndExec" name="Execute Unix process"																type="External process execution"/>
				<operation pattern="java.lang.ProcessImpl.waitFor" name="Waiting for forked process execution end"										type="External process execution"/>
				<operation pattern="java.lang.ProcessHandleImpl.waitForProcessExit0" name="Waiting for forked process exit"								type="External process execution"/>
				<operation pattern="java.util.concurrent.CountDownLatch.await" name="Java thread waiting for other thread signal(s)" priority="100"		type="Synchro"/>
				<operation pattern="java.util.concurrent.CyclicBarrier.await" name="Java thread waiting for other threads to be ready" priority="100"	type="Synchro"/>
				<operation pattern="java.lang.Object.wait" name="Object wait"																			type="Synchro"/>
				<operation pattern="sun.nio.ch.EPoll.wait" name="Poll wait"																				type="Synchro"/>
				<operation pattern="java.lang.Object.notifyAll" name="Wakes all threads"/>
				<operation pattern="java.lang.Object.notify" name="Wakes one thread"/>
				<operation pattern="sun.management.ThreadImpl.dumpAllThreads" name="Dump Threads"/>
				<operation pattern="jdk.internal.vm.Continuation.run" name="Exec virtualization"/>
				<operation pattern="javax.security.auth.login.LoginContext.login" name="Auth login"/>
				<operation pattern="sun.net.www.protocol.https.HttpsClient.New" name="HTTPS connection creation"        type="Network"/>
				<operation pattern="sun.security.rsa.RSACore" name="RSA Cryptographic operation" 						type="Crypto"/>
				<operation pattern="javax.crypto.KeyAgreement.generateSecret" name="Cryptographic key generation" 		type="Crypto"/>
				<operation pattern="sun.security.ssl.InputRecord.decrypt" name="SSL message decryption"					type="Crypto"/>
				<operation pattern="sun.security.x509.X509CertImpl.isSelfIssued" name="SSL certificate check"			type="Crypto"/>
				<operation pattern="javax.net.ssl.SSLContext.createSSLEngine" name="SSL engine creation"				type="Crypto"/>
				<operation pattern="sun.security.pkcs11" name="PKCS cryptographic operation"							type="Crypto"/>
				<operation pattern="javax.xml.transform.SecuritySupport.getSystemProperty" name="Java system property access"/>
				<operation pattern="com.sun.enterprise.resource.PoolManagerImpl.resourceClosed" name="Java pool ressource closing"		type="Resource pool"/>
				<operation pattern="com.sun.enterprise.resource.PoolManagerImpl.getResourceFromPool" name="Java pool ressource access"	type="Resource pool"/>
				<operation pattern="com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake" name="SSL handshake"/>
				<operation pattern="sun.security.ssl.SSLSocketImpl.performInitialHandshake" name="SSL handshake"/>
				<operation pattern="sun.net.ssl.internal.ssl.SSLSocketImpl.close" name="SSL socket closing"/>
				<operation pattern="sun.net.ssl.internal.ssl.SSLSocketImpl.writeRecord" name="SSL socket writing"/>
				<operation pattern="java.io.FileDescriptor.sync" name="Java disk writing"								type="File"/>
				<operation pattern="java.io.RandomAccessFile.writeBytes" name="Java file writing"						type="File"/>
				<operation pattern="sun.nio.ch.FileDispatcherImpl.write" name="File writing"							type="File"/>
				<operation pattern="java.io.ObjectInputStream.readObject" name="Object deserialization"/>
				<operation pattern="java.lang.StringBuilder.append" name="String builder append"						type="String"/>
				<operation pattern="java.lang.StringBuffer.append" name="String buffer append"							type="String"/>
				<operation pattern="java.lang.ThreadLocal" name="Thread local access"/>
				<operation pattern="java.util.Random.&lt;init&gt;" name="Random constructor"		                    type="Random generation"/>
				<operation pattern="java.util.Random.next"                name="Number generation"		                type="Random generation"/>
				<operation pattern="java.security.SecureRandom.nextBytes" name="Random number generation"				type="Random generation"/>
				<operation pattern="com.sun.jndi.ldap.LdapClient.authenticate" name="LDAP authenticate"/>
				<operation pattern="com.sun.jndi.ldap.LdapCtxFactory.getInitialContext" name="LDAP init"/>
				<operation pattern="sun.security.jca." name="Security certificate operation"							type="Crypto"/>
				<operation pattern="java.security.Signature.verify" name="Signature verification"						type="Crypto"/>
				<operation pattern="javax.crypto.JarVerifier.verifySingleJar" name="Jar file signature verification"	type="Crypto"/>
				<operation pattern="javax.crypto.Mac.update" name="Encryption MAC appliance"							type="Crypto"/>
				<operation pattern="javax.crypto.Mac.doFinal" name="Encryption MAC appliance"							type="Crypto"/>
				<operation pattern="sun.security.provider.SHA" name="SHA operation"										type="Crypto"/>
				<operation pattern="sun.net.ssl.internal.ssl.SSLSocketImpl.handleException" name="Buffer error while reading on SSL connection" type="Exception"/>
				<operation pattern="sun.security.ssl.SSLSocketImpl.handleException" 		name="Communication error" 							type="Exception"/>
				<operation pattern="javax.faces." name="JSF operation"/>
				<operation pattern="javax.crypto." name="Java cryptographic operation"									type="Crypto"/>
				<operation pattern="com.sun.crypto." name="Java cryptographic operation"								type="Crypto"/>
				<operation pattern="java.security.MessageDigest." name="Crypto algorithm operation"						type="Crypto"/>
				<operation pattern="sun.security.ssl." name="SSL operation"/>
				<operation pattern="sun.security.util.math." name="Security math operation"								type="Crypto"/>
				<operation pattern="java.net." name="Java IO access (network)"											type="Network"/>
				<operation pattern="jrockit.net." name="JRockit IO access (network)"									type="Network"/>
				<!--operation pattern="java.io." name="Java IO access"														type="I/O"/-->
				<operation pattern="sun.nio.ch.ServerSocketChannelImpl.accept0" name="Server socket listening"			type="Listen"/>
				<operation pattern="java.io.PrintStream.print" name="Print"												type="I/O"/>
				<operation pattern="java.io.PipedInputStream.read" name="Read pipe input"								type="I/O"/>
				<operation pattern="java.util.HashMap.get" name="Hash map access"										type="Collection"/>
				<operation pattern="java.util.Hashtable.get" name="Hash table access"									type="Collection"/>
				<operation pattern="java.util.TreeMap.put" name="Tree map insertion"									type="Collection"/>
				<operation pattern="Hashtable.containsKey" name="Hash table access"										type="Collection"/>
				<operation pattern="java.util.AbstractCollection." name="Java collection operation"						type="Collection"/>
				<operation pattern="java.util.ArrayList." name="Java list operation"									type="Collection"/>
				<operation pattern="java.util.Vector." name="Java vector operation"										type="Collection"/>
				<operation pattern="java.util.WeakHashMap." name="Java weak hash map operation"							type="Collection"/>
				<operation pattern="java.util.TreeMap." name="Java tree map operation"									type="Collection"/>
				<operation pattern="java.util.TreeSet." name="Java tree set operation"									type="Collection"/>
				<operation pattern="java.util.Hashtable." name="Java hash table operation"								type="Collection"/>
				<operation pattern="java.util.HashMap." name="Java hash map operation"								    type="Collection"/>
				<operation pattern="java.util.HashMap$" name="Java hash map operation"									type="Collection"/>
				<operation pattern="java.util.HashSet." name="Java hash set operation"								    type="Collection"/>
				<operation pattern="java.util.LinkedHashMap$" name="Java linked hash map operation"						type="Collection"/>
				<operation pattern="java.util.concurrent.ConcurrentHashMap." name="Java concurrent hashmap operation" 	type="Collection"/>
				<operation pattern="java.util.concurrent.ConcurrentHashMap$" name="Java concurrent hashmap operation" 	type="Collection"/>
				<operation pattern="java.util.Collections$SynchronizedMap" name="Java synchronized map operation" 		type="Collection"/>
				<operation pattern="java.util.Collections$UnmodifiableList" name="Java list operation" 					type="Collection"/>
				<operation pattern="java.beans.PropertyDescriptor.getReadMethod" name="Java property read method access" />
				<operation pattern="java.util.concurrent.SynchronousQueue.offer" name="Synchronous queue item insertion (can wait for consumption)"			type="Queue"/>
				<operation pattern="java.util.concurrent.LinkedBlockingQueue.offer" name="Linked blocking queue item insertion (can wait for consumption)"  type="Queue"/>
				<operation pattern="java.util.concurrent.DelayQueue.offer" name="Delay queue item insertion (can wait for consumption)"						type="Queue"/>
				<operation pattern="jdk.jfr.internal.JVM.emitEvent" name="JVM event published"/>
				<operation pattern="java.lang.Math." name="Java mathematic operation"/>
				<operation pattern="java.math." name="Java mathematic operation"/>
				<operation pattern="java.text.SimpleDateFormat.&lt;init&gt;" name="Simple date format creation"/>
				<operation pattern="java.text.SimpleDateFormat." name="Date format operation"/>
				<operation pattern="java.time.format.DateTimeFormatter.parse" name="Parse date time"/>
				<operation pattern="sun.util.calendar." name="Calendar operation"/>
				<operation pattern="com.sun.common.util.logging.LoggingOutputStream$LoggingPrintStream.write" name="Sun logging operation"	type="Log"/>
				<operation pattern="java.util.logging.Logger.log" name="Log util trace"														type="Log"/>
				<operation pattern="java.util.logging.FileHandler.publish" name="Log util file access"										type="Log"/>
				<operation pattern="sun.nio.ch.FileChannelImpl.force" name="Physical file writing" 						type="File"/>
				<operation pattern="com.sun.jna.Library$Handler.invoke" name="Native function call" 					type="Native"/>
				<operation pattern="java.util.GregorianCalendar." name="Calendar operation"/>
				<operation pattern="java.lang.String.format" name="Java String format"									type="String"/>
				<operation pattern="java.lang.String.replace" name="Java String replace"								type="String"/>
				<operation pattern="java.lang.String.intern" name="Java String intern"									type="String"/>
				<operation pattern="java.lang.StringBuffer." name="Java StringBuffer operation"							type="String"/>
				<operation pattern="java.lang.StringBuilder." name="Java StringBuilder operation"						type="String"/>
				<operation pattern="java.lang.NoSuchMethodException;java.lang.Class.getDeclaredMethod" name="Java method introspection failure"		type="Exception"/>    <!-- Multiple line pattern -->
				<operation pattern="java.lang.NoSuchMethodException;java.lang.Class.getMethod" name="Java method introspection failure"				type="Exception"/>    <!-- Multiple line pattern -->
				<operation pattern="java.util.MissingResourceException;java.util.ResourceBundle.getObject" name="Java bundle missing resource"		type="Exception"/>    <!-- Multiple line pattern -->
				<operation pattern="java.lang.IncompatibleClassChangeError.&lt;init&gt;" name="Java library incompatibility"						type="Exception"/>
				<operation pattern="java.lang.Throwable" name="Java exception generation" 								type="Exception"/>
				<operation pattern="java.lang.System.identityHashCode" name="Java identity hash code"/>
				<operation pattern="java.util.regex." name="Java regex operation"										type="Regular expression"/>
				<operation pattern="javax.swing." name="Java Swing operation"/>
				<operation pattern="java.lang.Class." name="Java Class operation"/>
				<operation pattern="sun.reflect." name="Java reflection operation"/>
				<operation pattern="java.reflect." name="Java reflection operation"/>
				<operation pattern="java.lang.reflect." name="Java reflection operation"/>
				<operation pattern="sun.nio.fs.WindowsNativeDispatcher." name="Windows native operation"/>
			</operations>
			<lockers>
				<!-- Locker patterns apply for the first 20 lines of the thread dump                 -->
			    <!-- Will also match lockInterruptibly -->
  				<locker pattern="java.util.concurrent.locks.LockSupport.park" name="LockSupport"/>			    
  				<locker pattern="java.util.concurrent.locks.ReentrantLock.lock" name="ReentrantLock"/>
  				<locker pattern="java.util.concurrent.locks.ReentrantLock.tryLock" name="ReentrantLock"/>
  				<locker pattern="java.util.concurrent.locks.Condition.await" name="Condition"/>
  				<locker pattern="java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock.lock" name="ReadLock"/>
  				<locker pattern="java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock" name="WriteLock"/>
  				<locker pattern="java.util.concurrent.CountDownLatch.await" name="CountDownLatch"/>
  				<locker pattern="java.util.concurrent.CyclicBarrier.await" name="CyclicBarrier"/>
  				<locker pattern="java.util.concurrent.Semaphore.acquire" name="Semaphore"/>
  				<locker pattern="java.util.concurrent.Phaser.arriveAndAwaitAdvance" name="Phaser"/>
  				<locker pattern="java.util.concurrent.Phaser.awaitAdvanceInterruptibly" name="Phaser"/>
  				<locker pattern="java.util.concurrent.Phaser.awaitAdvance" name="Phaser"/>
				<!-- try lock with timeout -->
				<locker pattern="java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos;java.util.concurrent.Semaphore.tryAcquire" name="Semaphore Timeout"/>
  				<locker pattern="com.sun.enterprise.resource.pool.datastructure.RWLockDataStructure.returnResource" name="RWLockDataStructure"/>
  				<locker pattern="jrockit.vm.Locks.lockFat" name="JRockit fat lock"/>
			</lockers>
			<executors>
				<!-- Executor patterns must be available within the 20 first lines of the thread dump -->
				<!-- J2EE -->
				<executor pattern="HttpServlet.service" name="HTTP request"/>
				<executor pattern="java.util.TimerThread.run" name="Java timer thread"/>
				<executor pattern="com.sun.enterprise.web.LifecycleStarter.doRun" name="Web container startup thread"/>
				<executor pattern="javax.management.timer.TimerAlarmClock.run" name="Javax clock timer thread"/>
				<executor pattern="java.util.TimerThread.mainLoop" name="Timer main loop"/>
				<executor pattern="java.lang.Thread.dispatchUncaughtException" name="JVM uncaugth exception thread"/>
				<executor pattern="jdk.jfr.internal.dcmd.DCmdStart.execute" name="JFR thread"/>
				<executor pattern="jdk.jfr.internal.dcmd.DCmdStop.execute" name="JFR thread"/>
				<executor pattern="jdk.jfr.internal.dcmd.DCmdDump.execute" name="JFR thread"/>
				<executor pattern="java.lang.Shutdown.shutdown" name="Java shutdown thread"/>
				<executor pattern="jdk.jfr.internal.ShutdownHook.run" name="JFR shutdown thread"/>
				<executor pattern="sun.net.dns.ResolverConfigurationImpl$AddressChangeListener.run" name="DNS change listener"/>
				<executor pattern="java.awt.EventDispatchThread.run" name="AWT event dispatcher"/>
				<executor pattern="sun.net.httpserver.ServerImpl$Exchange.run" name="HTTP server thread"/>
				<executor pattern="jdk.internal.misc.Signal$1.run" name="JVM signal handler"/>
				<executor pattern="com.sun.corba.se.impl.transport.SelectorImpl.run" name="CORBA selector"/>
				<executor pattern="com.sun.corba.se.impl.orb.ORBImpl.run" name="CORBA main"/>
				<executor pattern="sun.management.GarbageCollectorImpl.createGCNotification" name="GC notifier"/>
				<!-- Virtual threads -->
				<executor pattern="java.lang.VirtualThread.runContinuation" name="VT carrier"/>
				<executor pattern="java.lang.VirtualThread$VThreadContinuation.lambda" name="VT"/>
			</executors>
			<executor_thread_names>
				<!-- Executor pattern based on the thread name. Regular expression recommended -->
				<executor_thread_name pattern="Main" name="Program main"/>
				<executor_thread_name pattern="Keep-Alive-Timer" name="HTTP keep alive timer"/>
				<executor_thread_name pattern="Logging-Cleaner" name="Java logging cleaner"/>
				<executor_thread_name pattern="SIGTERM handler" name="JVM termination thread"/>
				<executor_thread_name pattern="JavaMail-EventQueue" name="Java mail event listener"/>
				<!-- Java 9+ JFR -->
				<executor_thread_name pattern="JFR Periodic Tasks" name="JFR"/>
			</executor_thread_names>
			<excludes>
				<exclude pattern="sun.nio.fs.LinuxWatchService.poll;sun.nio.fs.LinuxWatchService.access;sun.nio.fs.LinuxWatchService$Poller.run" name="Linux notify watcher polling"/>		<!-- Multiple line pattern -->
				<exclude pattern="sun.nio.fs.LinuxWatchService.poll;sun.nio.fs.LinuxWatchService$Poller.run;java.lang.Thread.run" name="Linux watch service polling" size="3"/>		<!-- Multiple line pattern -->
				<!-- Timers, waiting -->
				<exclude pattern="java.lang.Object.wait;java.util.TimerThread.mainLoop" name="Timer thread waiting"/>		<!-- Multiple line pattern -->
				<!-- Thread pools, waiting -->
				<exclude pattern="java.util.concurrent.ArrayBlockingQueue.take;java.util.concurrent.ThreadPoolExecutor.getTask;java.util.concurrent.ThreadPoolExecutor.runWorker" name="Worker thread waiting for a task to execute from an array blocking queue"/>		<!-- Multiple line pattern -->
				<exclude pattern="java.util.concurrent.ArrayBlockingQueue.poll;java.util.concurrent.ThreadPoolExecutor.getTask;java.util.concurrent.ThreadPoolExecutor.runWorker" name="Worker thread waiting for a task to execute from an array blocking queue (poll)"/>		<!-- Multiple line pattern -->				
				<exclude pattern="java.util.concurrent.LinkedBlockingQueue.take;java.util.concurrent.ThreadPoolExecutor.getTask;java.util.concurrent.ThreadPoolExecutor.runWorker" name="Worker thread waiting for a task to execute from a linked blocking queue"/>		<!-- Multiple line pattern -->
				<exclude pattern="java.util.concurrent.LinkedBlockingQueue.poll;java.util.concurrent.ThreadPoolExecutor.getTask;java.util.concurrent.ThreadPoolExecutor.runWorker" name="Worker thread waiting for a task to execute from a linked blocking queue (poll)"/>		<!-- Multiple line pattern -->
				<exclude pattern="java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.poll;java.util.concurrent.ThreadPoolExecutor.getTask;java.util.concurrent.ThreadPoolExecutor.runWorker" name="Worker thread waiting for a task to execute from a synchronous queue (poll)"/>		<!-- Multiple line pattern -->
				<exclude pattern="java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.poll;java.util.concurrent.ThreadPoolExecutor.getTask;java.util.concurrent.ThreadPoolExecutor$Worker.run" name="Worker thread waiting for task execution from a synchronous queue (poll)"/>		<!-- Multiple line pattern -->
				<exclude pattern="java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take;java.util.concurrent.ThreadPoolExecutor.getTask;java.util.concurrent.ThreadPoolExecutor.runWorker" name="Worker thread waiting for a task to execute from a delayed work queue (take)"/>		<!-- Multiple line pattern -->
				<exclude pattern="java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take;java.util.concurrent.ThreadPoolExecutor.getTask;java.util.concurrent.ThreadPoolExecutor$Worker.run" name="Worker thread waiting for task execution from a delayed work queue (take)"/>		<!-- Multiple line pattern -->
				<exclude pattern="java.util.concurrent.SynchronousQueue.take;java.util.concurrent.ThreadPoolExecutor.getTask;java.util.concurrent.ThreadPoolExecutor.runWorker" name="Worker thread waiting for a task to execute from a synchronous queue (take)"/>		<!-- Multiple line pattern -->
				<exclude pattern="java.util.concurrent.SynchronousQueue.poll;java.util.concurrent.ThreadPoolExecutor.getTask;java.util.concurrent.ThreadPoolExecutor.runWorker" name="Worker thread waiting for a task to execute from a synchronous queue (poll)"/>		<!-- Multiple line pattern -->
				<exclude pattern="java.util.concurrent.LinkedBlockingDeque.take;java.util.concurrent.ThreadPoolExecutor.getTask;java.util.concurrent.ThreadPoolExecutor.runWorker" name="Worker thread waiting for a task to execute from a linked blocking dequeue (take)"/>		<!-- Multiple line pattern -->
				<exclude pattern="java.util.concurrent.LinkedBlockingDeque.poll;java.util.concurrent.ThreadPoolExecutor.getTask;java.util.concurrent.ThreadPoolExecutor.runWorker" name="Worker thread waiting for a task to execute from a linked blocking dequeue (poll)"/>		<!-- Multiple line pattern -->
				<exclude pattern="sun.nio.ch.Iocp.getQueuedCompletionStatus;sun.nio.ch.Iocp.access$300;sun.nio.ch.Iocp$EventHandlerTask.run" name="Windows I/O completion wait"/>
				<exclude pattern="sun.nio.ch.EPoll.epollWait;sun.nio.ch.EPollPort$EventHandlerTask.poll;sun.nio.ch.EPollPort$EventHandlerTask.run" name="Windows E port poll wait"/>
				<exclude pattern="java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await;java.util.concurrent.ArrayBlockingQueue.take;sun.nio.ch.EPollPort$EventHandlerTask.run" name="Windows E port poll wait 2"/>		<!-- Multiple line pattern -->
				<exclude pattern="java.util.concurrent.locks.LockSupport.parkUntil;java.util.concurrent.ForkJoinPool.runWorker;java.util.concurrent.ForkJoinWorkerThread.run" name="Fork join dormant thread" size="4"/>		<!-- Multiple line pattern -->
				<exclude pattern="java.util.concurrent.locks.LockSupport.park;java.util.concurrent.ForkJoinPool.awaitWork;java.util.concurrent.ForkJoinPool.runWorker;java.util.concurrent.ForkJoinWorkerThread.run" name="Fork join dormant thread 2" size="5"/>		<!-- Multiple line pattern -->
				<exclude pattern="java.util.concurrent.locks.LockSupport.parkUntil;java.util.concurrent.ForkJoinPool.awaitWork;java.util.concurrent.ForkJoinPool.runWorker;java.util.concurrent.ForkJoinWorkerThread.run" name="Fork join dormant thread 3" size="5"/>		<!-- Multiple line pattern -->
				<exclude pattern="java.util.concurrent.locks.LockSupport.park;java.util.concurrent.ForkJoinPool.runWorker;java.util.concurrent.ForkJoinWorkerThread.run" name="Fork join unsignalled thread" size="4"/>		<!-- Multiple line pattern -->
				<exclude pattern="sun.misc.Unsafe.park;java.util.concurrent.ForkJoinPool.awaitWork;java.util.concurrent.ForkJoinPool.runWorker;java.util.concurrent.ForkJoinWorkerThread.run" name="Fork join parked thread" size="4"/>		<!-- Multiple line pattern -->
				<exclude pattern="sun.nio.fs.MacOSXWatchService.CFRunLoopRun;sun.nio.fs.MacOSXWatchService$CFRunLoopThread.run" name="MacOS XWatch Service lookibg for file changes" size="2"/>		<!-- Multiple line pattern -->
				<!-- If stack size is equal or below the limit (optional size attribute), thread stack is excluded -->
				<!-- exclude pattern="ThreadImpl.dumpThreads" name="Thread dump"/-->
				<exclude pattern="com.sun.jmx.remote.internal.ServerCommunicatorAdmin$Timeout.run" name="JMX"/>
				<!-- Sun KQueuePort -->
				<exclude pattern="java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await;java.util.concurrent.ArrayBlockingQueue.take;sun.nio.ch.KQueuePort$EventHandlerTask.run;sun.nio.ch.AsynchronousChannelGroupImpl$1.run" name="Sun event async group"/>
				<exclude pattern="sun.nio.ch.KQueuePort$EventHandlerTask.poll;sun.nio.ch.KQueuePort$EventHandlerTask.run" name="Sun kqueue event handler" size="4"/>
				<!-- HTTP -->
				<exclude pattern="sun.net.www.http.KeepAliveCache.run" name="HTTP keep alive timer" size="3"/>
				<exclude pattern="sun.nio.ch.SelectorImpl.lockAndDoSelect;sun.nio.ch.SelectorImpl.select;sun.net.httpserver.ServerImpl$Dispatcher.run" name="HTTP server select loop" size="7"/>
				<exclude pattern="sun.nio.ch.SelectorImpl.lockAndDoSelect;sun.nio.ch.SelectorImpl.select;jdk.internal.net.http.HttpClientImpl$SelectorManager.run" name="HTTP client select loop" size="5"/>
				<!-- CORBA -->
				<exclude pattern="com.sun.corba.se.impl.transport.SelectorImpl.run" name="CORBA selector" size="5"/>
				<exclude pattern="com.sun.corba.se.impl.orb.ORBImpl.run" name="CORBA main" size="5"/>
				<!-- Sun 2D -->
				<exclude pattern="sun.java2d.Disposer.run" name="Java 2D disposer" size="11"/>
				<exclude pattern="javax.swing.TimerQueue.run" name="Swing timer" size="9"/>
				<exclude pattern="java.lang.Object.wait;sun.java2d.metal.MTLRenderQueue$QueueFlusher.run;java.lang.Thread.run" name="Java 2D render queue waiting" size="3"/>
				<!-- AWT -->
				<exclude pattern="java.lang.Object.wait;sun.awt.AWTAutoShutdown.run" name="AWT shutdown hook" size="5"/>
				<exclude pattern="sun.awt.X11.XToolkit.waitForEvents;sun.awt.X11.XToolkit.run;sun.awt.X11.XToolkit.run" name="AWT X11 event " size="4"/>
				<!-- JNA -->
				<exclude pattern="com.sun.jna.internal.Cleaner$1.run" name="JNA cleaner" size="4"/>
				<!-- LDAP -->
				<exclude pattern="com.sun.jndi.ldap.AbstractLdapNamingEnumeration.getNextBatch;com.sun.jndi.ldap.AbstractLdapNamingEnumeration.hasMoreImpl;com.sun.jndi.ldap.AbstractLdapNamingEnumeration.hasMore;com.sun.jndi.ldap.NamingEventNotifier.run" name="LDAP notifier" size="14"/>
				<exclude pattern="java.lang.Object.wait;com.sun.jndi.ldap.EventQueue.dequeue;com.sun.jndi.ldap.EventQueue.run" name="LDAP event dequeue" size="5"/>
				<exclude pattern="java.io.BufferedInputStream.fill;java.io.BufferedInputStream.read1;java.io.BufferedInputStream.read;com.sun.jndi.ldap.Connection.run" name="LDAP connect wait" size="12"/>
				<!-- RMI -->
				<exclude pattern="RMIConnectionImpl.fetchNotifications" name="RMI"/>
				<exclude pattern="sun.rmi.transport.Transport.serviceCall" name="RMI"/>
				<exclude pattern="sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run" name="RMI"/>
				<exclude pattern="sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run" name="RMI"/>
				<exclude pattern="sun.rmi.transport.tcp.TCPTransport.handleMessages" name="RMI"/>
				<exclude pattern="sun.rmi.transport.ObjectTable$Reaper.run" name="RMI reaper"/>
				<exclude pattern="java.lang.Object.wait;java.lang.ref.ReferenceQueue.remove;java.lang.ref.ReferenceQueue.remove;java.io.ClassCache$Reaper.run" name="Class cache reaper"/>
				<exclude pattern="sun.rmi.transport.DGCClient$EndpointEntry$RenewCleanThread.run" name="RMI"/>
				<!-- GC related -->
				<exclude pattern="java.lang.ref.Finalizer$FinalizerThread.run" name="Finalizer"/>
				<exclude pattern="Reference$ReferenceHandler.run" name="Finalizer - Reference handler"/>
				<exclude pattern="sun.misc.GC$Daemon.run" name="GC"/>
				<!-- Java 9+ cleaner -->
				<exclude pattern="jdk.internal.misc.InnocuousThread.run" name="JVM cleaner" size="5"/>
				<!-- Java 9+ JFR -->
				<exclude pattern="jdk.jfr.internal.PlatformRecorder.lambda$startDiskMonitor" name="JFR disk monitor" size="8"/>
				<!-- Java 20+ Ref cleaner -->
				<exclude pattern="java.lang.ref.ReferenceQueue.await;java.lang.ref.ReferenceQueue.remove0;java.lang.ref.ReferenceQueue.remove;jdk.internal.ref.CleanerImpl.run" name="JDK ref cleaner" size="10"/>
				<!-- Virtual threads -->
				<exclude pattern="sun.nio.ch.WEPollPoller.poll;sun.nio.ch.Poller.poll;sun.nio.ch.Poller.pollLoop" name="VT write poller" size="6"/>
				<exclude pattern="sun.nio.ch.EPollPoller.poll;sun.nio.ch.Poller.poll;sun.nio.ch.Poller.pollLoop" name="VT write poller 2" size="6"/>
				<exclude pattern="java.util.concurrent.LinkedTransferQueue.awaitMatch;java.util.concurrent.LinkedTransferQueue.xfer;java.util.concurrent.LinkedTransferQueue.take;sun.nio.ch.Poller.updateLoop;java.lang.Thread.run;jdk.internal.misc.InnocuousThread.run" name="VT read poller" size="11"/>
				<exclude pattern="java.util.concurrent.LinkedTransferQueue$DualNode.await;java.util.concurrent.LinkedTransferQueue.xfer;java.util.concurrent.LinkedTransferQueue.take;sun.nio.ch.Poller.updateLoop" name="VT read poller 2" size="8"/>
				<exclude pattern="java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await;java.util.concurrent.LinkedBlockingQueue.take;javax.mail.EventQueue.run" name="Java mail events" size="6"/>
				<exclude pattern="sun.nio.ch.SelectorImpl.lockAndDoSelect;sun.nio.ch.SelectorImpl.select;com.sun.corba.se.impl.transport.SelectorImpl.run" name="CORBA selector thread" size="6"/>
			</excludes>
			<exclude_thread_names>
				<!-- Exclude stack based on thread name. Regular expression based recommended -->
				<!-- If stack size is equal or below the limit (optional size attribute), thread stack is excluded -->
				<!-- exclude_thread_name pattern_regex="RMI TCP.*" name="RMI"/-->
			</exclude_thread_names>
		</patterns>

</profile>
